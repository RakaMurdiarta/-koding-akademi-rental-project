// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Owner {
  id         String    @id @default(uuid()) @map("id")
  ownerType   String   @map("owner_type")
  cname      String?   @map("cname")
  bname      String?   @map("bname")
  fname      String    @map("fname")
  lname      String    @map("lname")
  vehicles   Vehicle[]
  customerId String    @unique @map("customer_id")
  customer   Customer  @relation(fields: [customerId], references: [id])
}

model Vehicle {
  id             String          @id @default(uuid()) @map("id")
  model          String          @map("model")
  year           Int             @map("year")
  identityNumber String          @map("idnumber")
  ownerId        String          @map("owner_id")
  owner          Owner           @relation(fields: [ownerId], references: [id])
  availability   Availability?
  vehicleTypeId  String          @map("vehicle_type_id")
  vehicleType    VehicleType     @relation(fields: [vehicleTypeId], references: [id])
  rent           Rents[]
  returnHistory  ReturnHistory[]
}

model VehicleType {
  id          String    @id @default(uuid()) @map("id")
  weeklyRate   Float    @map("Weekly_rate")
  dailyRate    Float    @map("Daily_rate")
  type        String    @map("Car_type")
  vehicles    Vehicle[]
}

model Availability {
  id              String    @id @default(uuid()) @map("id")
  availableStart DateTime? @map("available_start")
  availableEnd   DateTime? @map("available_end")
  isAvailable    Boolean   @map("is_avalaible")
  vehicleId       String    @unique @map("vehicle_id")
  vehicle         Vehicle   @relation(fields: [vehicleId], references: [id])
}

model Customer {
  id            String          @id @default(uuid()) @map("id")
  phone         String          @map("phone")
  email         String          @unique @map("email")
  password      String          @map("password")
  customerType  String          @map("customer_type")
  initial       String?         @map("initial")
  fname         String          @map("fname")
  lname         String?         @map("lname")
  cname         String?         @map("cname")
  rent          Rents[]
  returnHistory ReturnHistory[]
  isOwner       Boolean         @map("is_owner")
  owner         Owner?
}

model Rents {
  id          Int       @id @map("id")
  customerId String    @map("customer_id")
  vehicleId   String    @map("vehicle_id")
  startDate   DateTime? @map("start_date")
  returnDate  DateTime? @map("return_date")
  amountDue   Float     @map("Amount_due")
  noOfDays    Int       @map("Noofdays")
  active      Boolean   @map("Active")
  customer    Customer  @relation(fields: [customerId], references: [id])
  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id])
}

model Admin {
  id       String @id @default(uuid()) @map("id")
  username String @map("usernmae")
  password String @map("password")
}

model ReturnHistory {
  id          String   @id @default(uuid()) @map("id")
  customerId String   @map("customer_id")
  vehicleId   String   @map("vehicle_id")
  returnDate  DateTime @map("return_date")
  isLate      Boolean  @map("is_late")
  customer    Customer @relation(fields: [customerId], references: [id])
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
}

